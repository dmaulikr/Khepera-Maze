{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\fi560\sl288\slmult1\sb160\ql\qnatural\pardirnatural

\f0\fs26 \cf0 As much as we would like to make our code \'93environment independent\'94, visual processing unlike control (with a few minor exceptions for tuning) is very much different between Webots (simulator) and Khepera (real life). However there are some basic guidelines we followed in both the environments. Within the next section we would explain the common functionality in both the environments and in the next two subsection we would elaborate on the  different methods that deigned specifically for each of the environment.\
The first major visual processing step was creating projective transformation (Homography) between the captured image and a new coordinate system, and in the same time preserve the ratio of the original image. Projective transformation, is the process where we take X coordinates on one plane and, as the name suggest, project them to a new plane. \
Since projective transformation does not preserve ratio we needed to give our transformation function pre-defined coordinates to project to in order to preserve the original ratio. As recognising the corners of the maze can be a tricky, we decided recognising the centre of the filled circles at the corners of the maze and use those coordinates to preserve the expected ratio.\
The pre-defined coordinates calculation is a straight forward process and can be done in various way. In our system we hard-coded the scaled manually measured coordinates the maze. In order to find the centre of the filled circles at the corners of the maze we taken the thresholded image of the maze and scanned it for the four largest objects with the highest roundness factor. \
At last using projection transformation with our recently enquired coordinates from the image taken from the camera and our hard-coded ratio preserving coordinates we straightened the maze and minimised external noise. A visualisation of the projection transformation process can be found below.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs24 \cf0 {{\NeXTGraphic proj_new.png \width7556 \height4667
}¬}
\f0\fs26 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\fi560\sl288\slmult1\sb160\ql\qnatural\pardirnatural
\cf0 \
In both environments we choose not specifically recognise the boxes and to classify them as part of the walls instead. Our decision deriving from the fact that the robot should never cross/collide with neither a wall nor a box. The way we combine the the walls and the boxes is by using `IMCLOSE` a built in MATLAB function which performs a morphological closing, I.e. Removing small holes between objects.\
Our robot control is target-driven and so he always need to a have a target. In order to simplify the task, and the search space, we decided to introduce intermediate target until the robot reach the final goal.  \
Before the robot starts driving we scan for an opening in our thresholded maze at least by a pre-defined robot size, which also change between the environment. Once we found the x-coordinate of the beginning of the opening we combine it with the initial robot y-coordinate to get the first target and the final goal y-coordinate to get the second target. \
The final goal is located in the same way the filled circles at the corners of the maze are located, which would be covered more deeply in the following section. The difference is the this time instead of getting largest four roundness objects, we are getting the larger roundness object after after that.}